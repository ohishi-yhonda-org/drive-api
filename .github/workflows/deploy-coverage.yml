name: Sync to Public and Deploy Coverage

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  sync-to-public:
    runs-on: [self-hosted, Windows, X64, test]
    steps:
      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
      
      - name: Setup and Push to Public
        shell: pwsh
        run: |
          # Debug information
          Write-Host "=== Debug Information ==="
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          Write-Host "Directory contents:"
          Get-ChildItem -Force | Format-Table Name, Mode
          
          # Check git repository
          git status
          
          # Get list of files marked for encryption in .gitattributes
          $encryptedFiles = @()
          if (Test-Path .gitattributes) {
            Get-Content .gitattributes | ForEach-Object {
              if ($_ -match '^(.+?)\s+filter=git-crypt') {
                $encryptedFiles += $matches[1]
              }
            }
            Write-Host "Files to be removed: $($encryptedFiles -join ', ')"
          }
          
          # Add public remote
          git remote add public https://x-access-token:${{ secrets.PUBLIC_REPO_TOKEN }}@github.com/ohishi-yhonda-pub/drive-api.git 2>&1
          if ($LASTEXITCODE -ne 0) {
            git remote set-url public https://x-access-token:${{ secrets.PUBLIC_REPO_TOKEN }}@github.com/ohishi-yhonda-pub/drive-api.git
          }
          
          # Create temporary branch
          git checkout -b temp-public-sync
          
          # Remove sensitive files
          foreach ($file in $encryptedFiles) {
            if (Test-Path $file) {
              Remove-Item $file -Force
              Write-Host "Removed: $file"
            }
          }
          
          # Remove .gitattributes
          if (Test-Path .gitattributes) {
            Remove-Item .gitattributes -Force
            Write-Host "Removed: .gitattributes"
          }
          
          # Stage all changes
          git add -A
          
          # Commit if there are changes
          $changes = git status --porcelain
          if ($changes) {
            git commit -m "Remove sensitive files for public repository"
          } else {
            Write-Host "No changes to commit"
          }
          
          # Push to public repository
          git push public temp-public-sync:main --force 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Successfully pushed to public repository"
          } else {
            Write-Host "Push failed with exit code: $LASTEXITCODE"
            exit 1
          }

  deploy-coverage:
    needs: sync-to-public
    runs-on: [self-hosted, Windows, X64, test]
    steps:
      - name: Checkout public repository
        uses: actions/checkout@v4
        with:
          repository: ohishi-yhonda-pub/drive-api
          token: ${{ secrets.PUBLIC_REPO_TOKEN }}
      
      - name: Setup Git
        run: |
          $env:PATH = "C:\Program Files\Git\bin;C:\Program Files\Git\cmd;" + $env:PATH
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
      
      - name : set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm install
        
      - name: Run tests and generate coverage
        run: npm run test:coverage
      
      - name: Deploy coverage to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          personal_token: ${{ secrets.PUBLIC_REPO_TOKEN }}
          publish_dir: coverage
          publish_branch: gh-pages
          force_orphan: true
          external_repository: ohishi-yhonda-pub/drive-api
        env:
          PATH: "C:\\Program Files\\Git\\bin;C:\\Program Files\\Git\\cmd;${{ env.PATH }}"