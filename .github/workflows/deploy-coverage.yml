name: Sync to Public and Deploy Coverage

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  sync-to-public:
    runs-on: [self-hosted, Windows, X64, test]
    steps:
      - name: Sync to Public Repository
        run: |
          # Set Git path
          $env:PATH = "C:\Program Files\Git\bin;C:\Program Files\Git\cmd;" + $env:PATH
          
          # Configure git
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # Clone private repository to temp directory
          $tempDir = Join-Path $env:TEMP ("sync-" + (Get-Date -Format "yyyyMMddHHmmss"))
          Write-Host "Cloning to: $tempDir"
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/ohishi-yhonda-org/drive-api.git $tempDir
          cd $tempDir
          
          # Get list of files to remove from .gitattributes
          $filesToRemove = @()
          if (Test-Path .gitattributes) {
            Get-Content .gitattributes | ForEach-Object {
              if ($_ -match '^(.+?)\s+filter=git-crypt') {
                $filesToRemove += $matches[1]
              }
            }
          }
          
          # Remove sensitive files
          foreach ($file in $filesToRemove) {
            if (Test-Path $file) {
              Remove-Item $file -Force
              Write-Host "Removed: $file"
            }
          }
          
          # Remove .gitattributes
          if (Test-Path .gitattributes) {
            Remove-Item .gitattributes -Force
            Write-Host "Removed: .gitattributes"
          }
          
          # Stage and commit changes
          git add -A
          git commit -m "Remove sensitive files for public repository" --allow-empty
          
          # Add public remote and push
          git remote add public https://x-access-token:${{ secrets.PUBLIC_REPO_TOKEN }}@github.com/ohishi-yhonda-pub/drive-api.git
          git push public HEAD:main --force
          
          # Cleanup
          cd ..
          Remove-Item -Recurse -Force $tempDir

  deploy-coverage:
    needs: sync-to-public
    runs-on: [self-hosted, Windows, X64, test]
    steps:
      - name: Checkout public repository
        uses: actions/checkout@v4
        with:
          repository: ohishi-yhonda-pub/drive-api
          token: ${{ secrets.PUBLIC_REPO_TOKEN }}
      
      - name: Setup Git
        run: |
          $env:PATH = "C:\Program Files\Git\bin;C:\Program Files\Git\cmd;" + $env:PATH
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm install
        
      - name: Run tests and generate coverage
        run: npm run test:coverage
        
      - name: Generate API documentation from Wrangler
        run: |
          # Copy template file for Wrangler
          Copy-Item .dev.vars.template .dev.vars
          
          # Install dependencies if not already installed
          if (!(Test-Path node_modules)) {
            npm install
          }
          
          # Start Wrangler directly (not in background)
          $wranglerProcess = Start-Process -FilePath "npx" -ArgumentList "wrangler", "dev", "--port", "8787", "--local" -PassThru -NoNewWindow -RedirectStandardOutput "wrangler.log" -RedirectStandardError "wrangler-error.log"
          
          # Give Wrangler time to start
          Start-Sleep -Seconds 5
          
          # Wait for server to start
          $maxAttempts = 30
          $attempt = 0
          while ($attempt -lt $maxAttempts) {
            try {
              # Check if process is still running
              if ($wranglerProcess.HasExited) {
                Write-Host "Wrangler process exited unexpectedly"
                Get-Content wrangler.log
                Get-Content wrangler-error.log
                exit 1
              }
              
              $response = Invoke-WebRequest -Uri "http://localhost:8787" -UseBasicParsing -ErrorAction Stop
              if ($response.StatusCode -eq 200) {
                Write-Host "Wrangler server is ready!"
                break
              }
            } catch {
              Write-Host "Waiting for server... (attempt $($attempt + 1)/$maxAttempts)"
            }
            Start-Sleep -Seconds 2
            $attempt++
          }
          
          if ($attempt -eq $maxAttempts) {
            Write-Error "Wrangler server failed to start"
            Get-Content wrangler.log
            Get-Content wrangler-error.log
            Stop-Process -Id $wranglerProcess.Id -Force
            exit 1
          }
          
          # Fetch OpenAPI specification
          Write-Host "Fetching OpenAPI specification..."
          $openApiResponse = Invoke-WebRequest -Uri "http://localhost:8787/specification" -UseBasicParsing
          $openApiJson = $openApiResponse.Content
          
          # Create docs directory
          New-Item -ItemType Directory -Force -Path docs
          
          # Save OpenAPI spec
          $openApiJson | Out-File -FilePath docs/openapi.json -Encoding UTF8
          
          # Clean up
          Remove-Item .dev.vars
          Stop-Process -Id $wranglerProcess.Id -Force -ErrorAction SilentlyContinue
          Remove-Item wrangler.log -Force -ErrorAction SilentlyContinue
          Remove-Item wrangler-error.log -Force -ErrorAction SilentlyContinue
          
          Write-Host "API documentation generated successfully!"
      
      - name: Prepare GitHub Pages content
        run: |
          # Create gh-pages directory structure
          mkdir gh-pages
          mkdir gh-pages/coverage
          
          # Copy coverage report to subdirectory
          Copy-Item -Recurse coverage/* gh-pages/coverage/
          
          # Copy API documentation to root
          if (Test-Path docs) {
            Copy-Item -Recurse docs/* gh-pages/
          }
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          personal_token: ${{ secrets.PUBLIC_REPO_TOKEN }}
          publish_dir: gh-pages
          publish_branch: gh-pages
          force_orphan: true
          external_repository: ohishi-yhonda-pub/drive-api
        env:
          PATH: "C:\\Program Files\\Git\\bin;C:\\Program Files\\Git\\cmd;${{ env.PATH }}"